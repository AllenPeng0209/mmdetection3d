var KittiViewer = function (pointCloud, logger, imageCanvas) {    this.backend = "http://127.0.0.1:16666";    this.gtPath = "/home/jiamiaoxu/data/code/detection_evaluation/tracking_Jiamiao/groundtruth";    this.prePath = "/home/jiamiaoxu/format_fix_velocity";    this.pcdPath = "/home/jiamiaoxu/data/code/detection_evaluation/tracking_Jiamiao/pcd";    this.mapPath = "/home/jiamiaoxu/data/our_data/prediction_data/hdmap/longhua_map_0422.bin";    this.trajectoryFile = "/home/jiamiaoxu/code/attribute_pkl/gt_trajectories.pkl";    this.velocityFile = "/home/jiamiaoxu/code/attribute_pkl/gt_velocity.pkl";    this.accelerateFile = "/home/jiamiaoxu/code/attribute_pkl/gt_accelerate.pkl";    this.turnFile = "/home/jiamiaoxu/code/attribute_pkl/gt_turn.pkl";    this.cutInFile = "/home/jiamiaoxu/code/attribute_pkl/gt_cutIn.pkl";    this.onLaneFile = "/home/jiamiaoxu/code/attribute_pkl/gt_onLane.pkl";    this.gtConfigPath = "/home/jiamiaoxu/data/our_data/prediction_data/20190412_rain_1/config";    this.evalPath = "/home/jiamiaoxu/code/detection_evaluation/evaluations/eval_prediction";    this.configPath = "/home/jiamiaoxu/code/detection_evaluation/configs/prediction.eval.config";    this.behavior = "all";    this.imageIndexes = [];    this.imageIndex = 0;    this.gtBoxes = [];    this.dtBoxes = [];    this.gtBboxes = [];    this.dtBboxes = [];    this.gt_trajector_boxes = [];    this.dt_trajector_boxes = [];    this.gt_lines = [];    this.dt_lines = [];    this.pointCloud = pointCloud;    this.maxPoints = 150000;    this.pointVertices = new Float32Array(this.maxPoints * 3);    this.labelColor = "#a55d8d";    this.dtLabelColor = "#50a6c1";    this.gtBoxColor = "#3cdd04";    this.dtBoxColor = "#50a6c1";    this.boxColor="#3cdd04";    this.logger = logger;    this.imageCanvas = imageCanvas;    this.image = '';    this.enableInt16 = true;    this.int16Factor = 100;    this.removeOutside = true;    this.timeStamps = [];    this.timeStamp = 0;    this.flag = null;    this.showLabel = false;    this.OneIdOneColor = false;    this.gt_curriColor = ["#3cdd04", "#a55d8d", "#50a6c1", "#e5dd12", "#f90c1a"];    this.dt_curriColor = ["#50a6c1", "#3cdd04", "#e5dd12", "#f90c1a", "#a55d8d"];};KittiViewer.prototype = {    readCookies : function(){        if (CookiesKitti.get("kittiviewer_backend")){            this.backend = CookiesKitti.get("kittiviewer_backend");        }        if (CookiesKitti.get("kittiviewer_gtPath")){            this.gtPath = CookiesKitti.get("kittiviewer_gtPath");        }        if (CookiesKitti.get("kittiviewer_prePath")){            this.prePath = CookiesKitti.get("kittiviewer_prePath");        }        if (CookiesKitti.get("kittiviewer_pcdPath")){            this.pcdPath = CookiesKitti.get("kittiviewer_pcdPath");        }        if (CookiesKitti.get("kittiviewer_mapPath")){            this.mapPath = CookiesKitti.get("kittiviewer_mapPath");        }        if (CookiesKitti.get("kittiviewer_trajectoryFile")){            this.trajectoryFile = CookiesKitti.get("kittiviewer_trajectoryFile");        }        if (CookiesKitti.get("kittiviewer_velocityFile")){            this.velocityFile = CookiesKitti.get("kittiviewer_velocityFile");        }        if (CookiesKitti.get("kittiviewer_accelerateFile")){            this.accelerateFile = CookiesKitti.get("kittiviewer_accelerateFile");        }        if (CookiesKitti.get("kittiviewer_turnFile")){            this.turnFile = CookiesKitti.get("kittiviewer_turnFile");        }        if (CookiesKitti.get("kittiviewer_cutInFile")){            this.cutInFile = CookiesKitti.get("kittiviewer_cutInFile");        }        if (CookiesKitti.get("kittiviewer_onLaneFile")){            this.onLaneFile = CookiesKitti.get("kittiviewer_onLaneFile");        }        if (CookiesKitti.get("kittiviewer_gtConfigPath")){            this.gtConfigPath = CookiesKitti.get("kittiviewer_gtConfigPath");        }        if (CookiesKitti.get("kittiviewer_evalPath")){            this.evalPath = CookiesKitti.get("kittiviewer_evalPath");        }        if (CookiesKitti.get("kittiviewer_configPath")){            this.configPath = CookiesKitti.get("kittiviewer_configPath");        }        if (CookiesKitti.get("kittiviewer_behavior")){            this.behavior = CookiesKitti.get("kittiviewer_behavior");        }    },    addhttp: function (url) {        if (!/^https?:\/\//i.test(url)) {            url = 'http://' + url;        }        return url    },    load: function () {        let self = this;        let data = {};        data["gtPath"] = this.gtPath;        data["prePath"] = this.prePath;        data["pcdPath"] = this.pcdPath;        data["mapPath"] = this.mapPath;        data["trajectoryFile"] = this.trajectoryFile;        data["velocityFile"] = this.velocityFile;        data["accelerateFile"] = this.accelerateFile;        data["turnFile"] = this.turnFile;        data["cutInFile"] = this.cutInFile;        data["onLaneFile"] = this.onLaneFile;        data["gtConfigPath"] = this.gtConfigPath;        data["evalPath"] = this.evalPath;        data["configPath"] = this.configPath;        data["behavior"]  = this.behavior;        $(".imgidx")[0].value = 0;        return $.ajax({            url: this.addhttp(this.backend) + '/api/read_all',            method: 'POST',            contentType: "application/json",            data: JSON.stringify(data),            error: function (jqXHR, exception) {                self.logger.error("load detection fail!");                console.log("load detection fail!");            },            success: function (response) {                let result = response["results"][0];                self.timeStamps = [];                for (var i = 0; i < result["timeStamps"].length; ++i)                     self.timeStamps.push(result["timeStamps"][i]);                self.imageIndex = result["start_index"];                self.timeStamp = result["timeStamps"][self.imageIndex];                self.logger.message("loading success!");                $(".imgidx")[0].value = this.imageIndex.toString();            }        });    },    autoplay: function () {        if(this.flag)        {            this.logger.message("Message: pause video")            clearInterval(this.flag);            this.flag = null;        }        else        {            this.logger.message("Message: autoplay video")            this.flag = setInterval(show, 150);        }    },    plot: function () {        return this._plot(this.timeStamp);    },    plot_v2: function () {         if(this.showError)        {            if(this.imageIndex < this.imageIndexes.length)            {                this.timeStamp = this.imageIndexes[this.imageIndex-1]            }        }        else        {            if(this.imageIndex < this.timeStamps.length)            {                this.timeStamp = this.timeStamps[this.imageIndex-1];            }        }        return this._plot(this.timeStamp);    },    next: function () {        if(this.showError)        {            if(this.imageIndex < this.imageIndexes.length)            {                this.imageIndex = this.imageIndex + 1;                $(".imgidx")[0].value = this.imageIndex.toString()                this.timeStamp = this.imageIndexes[this.imageIndex-1]                $(".timestampidx")[0].value = this.timeStamp.toString()                return this.plot();            }        }        else        {            if(this.imageIndex < this.timeStamps.length){                this.imageIndex = this.imageIndex + 1;                $(".imgidx")[0].value = this.imageIndex.toString()                this.timeStamp = this.timeStamps[this.imageIndex-1];                $(".timestampidx")[0].value = this.timeStamp.toString()                return this.plot();            }        }    },    prev: function () {        if(this.showError)        {            if(this.imageIndex > 1 && this.imageIndexes.length > 0)            {                this.imageIndex = this.imageIndex - 1;                $(".imgidx")[0].value = this.imageIndex.toString()                this.timeStamp = this.imageIndexes[this.imageIndex-1]                $(".timestampidx")[0].value = this.timeStamp.toString()                return this.plot();            }        }        else        {            if(this.imageIndex > 1 && this.timeStamps.length > 0){            this.imageIndex = this.imageIndex - 1;            this.timeStamp = this.timeStamps[this.imageIndex-1];            $(".timestampidx")[0].value = this.timeStamp.toString()            return this.plot();            }        }    },    clear: function(){        for (var i = 0; i < this.gtBoxes.length; ++i) {            for (var j = this.gtBoxes[i].children.length - 1; j >= 0; j--) {                this.gtBoxes[i].remove(this.gtBoxes[i].children[j]);            }            scene.remove(this.gtBoxes[i]);            this.gtBoxes[i].geometry.dispose();            this.gtBoxes[i].material.dispose();        }        this.gtBoxes = [];        for (var i = 0; i < this.dtBoxes.length; ++i) {            for (var j = this.dtBoxes[i].children.length - 1; j >= 0; j--) {                this.dtBoxes[i].remove(this.dtBoxes[i].children[j]);            }            scene.remove(this.dtBoxes[i]);            this.dtBoxes[i].geometry.dispose();            this.dtBoxes[i].material.dispose();        }        for (var i = 0; i < this.gt_trajector_boxes.length; ++i) {            for (var j = this.gt_trajector_boxes[i].children.length - 1; j >= 0; j--) {                this.gt_trajector_boxes[i].remove(this.gt_trajector_boxes[i].children[j]);            }            scene.remove(this.gt_trajector_boxes[i]);            this.gt_trajector_boxes[i].geometry.dispose();            this.gt_trajector_boxes[i].material.dispose();        }        for (var i = 0; i < this.dt_trajector_boxes.length; ++i) {            for (var j = this.dt_trajector_boxes[i].children.length - 1; j >= 0; j--) {                this.dt_trajector_boxes[i].remove(this.dt_trajector_boxes[i].children[j]);            }            scene.remove(this.dt_trajector_boxes[i]);            this.dt_trajector_boxes[i].geometry.dispose();            this.dt_trajector_boxes[i].material.dispose();        }        for (var i = 0; i < this.gt_lines.length; ++i) {            for (var j = this.gt_lines[i].children.length - 1; j >= 0; j--) {                this.gt_lines[i].remove(this.gt_lines[i].children[j]);            }            scene.remove(this.gt_lines[i]);            this.gt_lines[i].geometry.dispose();            this.gt_lines[i].material.dispose();        }        for (var i = 0; i < this.dt_lines.length; ++i) {            for (var j = this.dt_lines[i].children.length - 1; j >= 0; j--) {                this.dt_lines[i].remove(this.dt_lines[i].children[j]);            }            scene.remove(this.dt_lines[i]);            this.dt_lines[i].geometry.dispose();            this.dt_lines[i].material.dispose();        }        this.dtBoxes = [];        this.gtBboxes = [];        this.dtBboxes = [];        this.gt_trajector_boxes = [];        this.dt_trajector_boxes = [];        this.gt_lines = [];        this.dt_lines = [];        // this.image = '';    },    _plot: function (timeStamp) {        console.log(this.timeStamps.length);        if (this.timeStamps.length != 0 && this.timeStamps.includes(timeStamp)) {            let data = {};            data["timeStamp"] = this.timeStamp;            data["enable_int16"] = this.enableInt16;            data["int16_factor"] = this.int16Factor;            //data["remove_outside"] = this.removeOutside;            let self = this;           var ajax1 = $.ajax({                url: this.addhttp(this.backend) + '/api/get_pointcloud',                method: 'POST',                contentType: "application/json",                data: JSON.stringify(data),                error: function (jqXHR, exception) {                    self.logger.error("get point cloud fail!!");                    console.log("get point cloud fail!!");                },                success: function (response) {                    self.clear();                    response = response["results"][0];                    var points_buf = str2buffer(atob(response["pointcloud"]));                    var points;                    if (self.enableInt16){                        var points = new Int16Array(points_buf);                    }                    else{                        var points = new Float32Array(points_buf);                    }                    var gt_loc = response["gt_loc"];                    var gt_dims = response["gt_dims"];                    var gt_yaws = response["gt_yaws"];                    var gt_names = response["gt_names"];                    var gt_trajectory = response["gt_trajectories"];                    var dt_loc = response["dt_loc"];                    var dt_dims = response["dt_dims"];                    var dt_yaws = response["dt_yaws"];                    var dt_names = response["dt_names"];                    var dt_trajectory = response["pre_trajectories"]                    var numFeatures = response["num_features"];                    // draw gt                    self.gtBoxes = boxEdgeWithLabelV3(gt_dims, gt_loc, gt_yaws, 2,                    self.gtBoxColor, gt_names, self.gtBoxColor, self.showLabel, true, self.OneIdOneColor,                    self.gt_curriColor);                    for (var i = 0; i < self.gtBoxes.length; ++i) {                        scene.add(self.gtBoxes[i]);                    }                    self.gt_trajector_boxes = circle(gt_trajectory, self.gtBoxColor, 0.15, 0.15, 2, self.OneIdOneColor, self.gt_curriColor);                    for (var i = 0; i < self.gt_trajector_boxes.length; ++i) {                        scene.add(self.gt_trajector_boxes[i]);                    }                    self.gt_lines = draw_line(gt_trajectory, self.gtBoxColor, 0.15, 2, self.OneIdOneColor, self.gt_curriColor);                    for(var i = 0; i < self.gt_lines.length; ++i)                    {                        scene.add(self.gt_lines[i]);                    }                    // draw dt                    self.dtBoxes = boxEdgeWithLabelV3(dt_dims, dt_loc, dt_yaws, 2,                    self.dtBoxColor, dt_names, self.dtBoxColor, self.showLabel, false, self.OneIdOneColor,                    self.dt_curriColor);                    for (var i = 0; i < self.dtBoxes.length; ++i) {                        scene.add(self.dtBoxes[i]);                    }                    self.dt_trajector_boxes = circle(dt_trajectory, self.dtBoxColor, 0.15, 0.15, 2, self.OneIdOneColor, self.dt_curriColor)                    for (var i = 0; i < self.dt_trajector_boxes.length; ++i) {                        scene.add(self.dt_trajector_boxes[i]);                    }                    self.dt_lines = draw_line(dt_trajectory, self.dtBoxColor, 0.15, 2, self.OneIdOneColor, self.dt_curriColor);                    for(var i = 0; i < self.dt_lines.length; ++i)                    {                        scene.add(self.dt_lines[i]);                    }                    for (var i = 0; i < Math.min(points.length / numFeatures, self.maxPoints); i++) {                        for (var j = 0; j < numFeatures; ++j){                            self.pointCloud.geometry.attributes.position.array[i * 3 + j] = points[                                i * numFeatures + j];                        }                    }                    if (self.enableInt16){                        for (var i = 0; i < self.pointCloud.geometry.attributes.position.array.length; i++) {                            self.pointCloud.geometry.attributes.position.array[i] /=self.int16Factor;                        }                        }                    self.pointCloud.geometry.setDrawRange(0, Math.min(points.length / numFeatures,                        self.maxPoints));                    self.pointCloud.geometry.attributes.position.needsUpdate = true;                    self.pointCloud.geometry.computeBoundingSphere();                }            });        } else {            if (this.imageIndexes.length == 0){                this.logger.error("image indexes isn't load, please click load button!");                console.log("image indexes isn't load, please click load button!!");            }else{                this.logger.error("out of range!");                console.log("out of range!");            }        }    },    drawImage : function(){        if (this.image === ''){            console.log("??????");            return;        }        let self = this;        var image = new Image();        image.onload = function() {            let aspect = image.width / image.height;            let w = self.imageCanvas.width;            self.imageCanvas.height = w / aspect;            let h = self.imageCanvas.height;            let ctx = self.imageCanvas.getContext("2d");            console.log("draw image");            ctx.drawImage(image, 0, 0, w, h);            let x1, y1, x2, y2;        };        image.src = this.image;    },    saveAsImage: function(renderer) {        var imgData, imgNode;        try {            var strMime = "image/jpeg";            var strDownloadMime = "image/octet-stream";            imgData = renderer.domElement.toDataURL(strMime);            this.saveFile(imgData.replace(strMime, strDownloadMime), `pc_${this.imageIndex}.jpg`);        } catch (e) {            console.log(e);            return;        }    },    saveFile : function (strData, filename) {        var link = document.createElement('a');        if (typeof link.download === 'string') {            document.body.appendChild(link); //Firefox requires the link to be in the body            link.download = filename;            link.href = strData;            link.click();            document.body.removeChild(link); //remove the link when done        } else {            location.replace(uri);        }    }}